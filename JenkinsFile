#!/usr/bin/env groovy
pipeline {
    agent any
    parameters {
        string(defaultValue: 'uat', name: 'ENVIRONMENT')
        string(defaultValue: 'regression', name: 'TAG')
    }
    stages {
        stage('Checkout Code') {
            steps {
                deleteDir()
                println('**** Checkout code from git repository ****')
                checkout scm
                println('**** Checkout code from git repository completed ****')
            }
        }
        stage('Run Account Demo Tests') {
            steps {
                println('**** Trigger Web Tests ****')
                bat "mvn clean verify -Dcucumber.filter.tags=@${TAG} -Denvironment=${ENVIRONMENT}"
                bat "mvn serenity:aggregate"
            }
        }
        stage('Generate Serenity Report') {
            steps {
                println('**** Generating report ****')
                publishHTML(
                        [
                                alwaysLinkToLastBuild: true,
                                allowMissing: true,
                                keepAll: true,
                                reportDir: 'target/site/serenity',
                                reportFiles: 'index.html',
                                reportName: 'Resultado Demo Parabank',
                                reportTitles: 'Demo Parabank'
                        ]
                )
            }
        }
		
    }

    post {
        success {
            // Acciones después de un éxito
            echo 'El pipeline se ejecutó exitosamente.'
        }
        failure {
            // Acciones después de un fallo
            echo 'El pipeline falló. Se requiere atención.'
        }
    }

}


